---
layout: post
title: "C语言 数据结构-图"
categories:  softks
---


### 1.实现步骤
- 1.定义图的结构
    - 定义边数据结构
    - 定义顶节点数据结构
    - 定义图数据结构
- 2.创建图
    - 输入顶节点、边的数量
    - 初始化顶节点
    - 定义顶节点的关系,采用链表链接起来(采用前插法)
- 3.打印图
- 4.图的遍历
    - DFS(深度优先遍历)
    - BFS(广度优先遍历)

### 2.具体代码如下
```c
#include<stdio.h>

#define MaxN 100
// 边节点
typedef struct ArcNode{
  int adjvex;
  int weigth;
  struct ArcNode *next;
}EdgeNode;

// 顶节点
typedef struct VNode{
  int data;
  struct ArcNode *firstarc;        
} AdjList[MaxN];

// 图
typedef struct{
  int Vnum;//顶点数量
  int Enum;//边数量
  AdjList Vertices;
}Graph;
 
// 手动创建图
void Create(Graph *G){
    int e,v;
    int i,j;
    char data;
    int vi,vj;
    int weigth;
    printf("input V,E:");
    scanf("%d%d",&v,&e);
    
    G->Vnum=v;
    G->Enum=e;

    //初始化顶点
    for(i=0;i<v;i++){
        printf("\nv init:",i+1,i+1);
        // int tmp;
        // tmp=65+i;             
        // printf("%c",(char)tmp);
        G->Vertices[i].data=i;
        G->Vertices[i].firstarc=NULL;
    }
    //初始化边关系
    for(i=0;i<e;i++){
        printf("\ni,j,weigth:");
        scanf("%d%d%d",&vi,&vj,&weigth);
        //添加一个节点
        EdgeNode *s=(EdgeNode*)malloc(sizeof(EdgeNode));  
        s->adjvex=vj;  
        s->next=NULL;
        vi-=1;
        vj-=1;

        //前插法
        s->next=G->Vertices[vi].firstarc;
        G->Vertices[vi].firstarc=s;

        //后插法(有bug，插入第二个数据报错)
        // if(G->Vertices[vi].firstarc==NULL){
        //    G->Vertices[vi].firstarc=s;                             
        // }else{
        //     EdgeNode *p;
        //     p=G->Vertices[vi].firstarc;
        //     while(p!=NULL){
        //         p=p->next;
        //     }
        //     p->next=s;
        // }

    }
}

//打印领接表
void print(Graph *G){
     int i;
     for(i=0;i<G->Vnum;i++){
       EdgeNode *p;
       printf("\nnode address = %X data=%d->",&G->Vertices[i],G->Vertices[i].data);
       p=G->Vertices[i].firstarc;
       
       while(p != NULL){
          printf("%d->",p->adjvex);
          p=p->next;
       }
       printf("NULL\n");
     }
}

//逆领接表
void reverse(Graph *G){

}

//传参数 创建图
void CreateG(Graph *G,int v,int e,int E[][3],int Elen){
    int i,j;
    char data;
    int vi,vj;
    int weigth;

    G->Vnum=v;
    G->Enum=e;

    //初始化顶点
    for(i=0;i<v;i++){
        printf("\nvnode init:%d",i);
        G->Vertices[i].data=i;
        G->Vertices[i].firstarc=NULL;
    }
    printf("\nV E size :%d\n",Elen);
    for(i=0;i<Elen;i++){
       
        vi=E[i][0];
        vj=E[i][1];
        weigth=E[i][2];

        EdgeNode *s=(EdgeNode*)malloc(sizeof(EdgeNode));  
        s->adjvex=vj;  
        s->weigth=weigth;

        s->next=G->Vertices[vi].firstarc;
        G->Vertices[vi].firstarc=s;

    }
}

int visited[MaxN] = {0};
/*对图G进行深度优先遍历*/
void DFS(Graph *G,int i){
    int j;
    visited[i]=1;
    printf("%d->",i);
    EdgeNode *p;
    p=G->Vertices[i].firstarc;
    
    while(p!=NULL){
        j=p->adjvex;//下一个节点信息
        if(visited[j]==0){
            DFS(G,j);
        }
        p=p->next;
    }
}

/*对图G进行广度优先遍历*/
void BFS(Graph G,int i){
   /*对图G进行广度优先遍历*/
}

int main(){
    Graph *G;    
    G=(Graph *)malloc(sizeof(Graph));
    int E[][3]={
        {0,1,1},
        {0,2,1},
        {2,3,1},
        {3,0,1},
        // {1,2,1},
    };
    int Elen = sizeof(E)/(3*sizeof(int));
    // 创建图
    printf("\nCreate Graph:"); 
    CreateG(G,Elen,Elen,E,Elen);

    printf("\nprint Graph:"); 
    print(G); 

    int i;
    printf("\nDFS:\n");
    for(i=0;i<G->Vnum;i++){
        DFS(G,i);
        printf("\n");
    }

    system("pause");
    return 0;
}

```
