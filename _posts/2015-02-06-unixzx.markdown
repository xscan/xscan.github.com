---
layout: post
title: Unix哲学
categories: home
---

##Unix哲学


	1 模块化原则：使用简洁的接口拼合简单的部件。

	2 清晰性原则：清晰胜于机巧。

	3 整合化原则： 设计时考虑拼接组合。

	4 分离性原则： 策略同机制分离；接口同引擎分离。

	5 简单化原则： 设计要简洁，复杂度能低则低。

	6 吝啬性原则： 除非确无他法，不要编写庞大的程序。

	7 透明化原则： 设计要可见，以便审查和调试。

	8 健壮性原则： 健壮源于透明和简洁。

	9 表示原则：把知识叠入数据以求逻辑质朴而健壮。

	10 通俗原则： 接口设计避免标新立异。

	11 缄默原则： 当一个程序没有什么好说的，就沉默。

	12 补救原则： 出现异常时，马上退出并给出足够错误信息。

	13 经济原则： 宁花机器一分，不花程序员一秒。

	14 生产原则： 避免手工hack操作；尽可能让程序完成编程工作。

	15 优化原则： 雕琢之前先要有原型，跑之前先学会走。

	16 多样原则： 决不相信所谓“不二法门”的断言。

	17 扩展原则： 设计着眼未来，未来总比预想的来的快。

##应用Unix哲学


	* 只要可行，一切都应该做成与来源和目标无关的过滤器。

	* 数据流应尽可能文本化（这样可以使用标准工具来查看和过滤）。

	* 数据库部署和应用协议应尽可能文本化（让人可以阅读和编辑）。

	* 复杂的前端（用户界面）和后端应该泾渭分明。

	* 如果可能，用C编写前，先用解释性语言搭建原型。

	* 当且仅当只用一门语言编程会提高程序复杂度时，混用语言编程才比单一语言编程来得好。

	* 宽收严发（对接收的东西要包容，对输出的东西要严格）。

	* 过滤时，不需要丢弃的信息决不丢。

	* 小就是美。在确保完成任务的基础上，程序功能尽可能少。